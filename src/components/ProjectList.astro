---
import ProjectCard from '../components/ProjectCard.astro'

const { projects, layout, fitCards } = Astro.props

const projectCards = projects.map((project: any) => ({
  title: project.projectHero?.details?.title || '',
  clientname: project.projectMeta?.projectClient?.nodes[0].title || '',
  size: project.projectMeta?.thumbnailGroup?.size?.toString() || '',
  imgsrc: project.projectMeta?.thumbnailGroup?.thumbnail?.node?.sourceUrl || '',
  imgalt: project.projectMeta?.thumbnailGroup?.thumbnail?.node?.altText || '',
  vidsrc: project.projectMeta?.thumbnailGroup?.vimeo || '',
  services: project.projectMeta?.services?.nodes || [],
  link: `/project/${project.slug}/`,
}))
---

<section
  class="projects-wrapper"
  class:list={[
    {
      'layout-grid': layout === 'grid',
      'layout-list': layout !== 'grid',
    },
  ]}
>
  <div class="grid gap-12 gap-y-8 md:gap-y-12 lg:gap-y-24 project-list start">
    {
      projectCards &&
        projectCards.map((item: any) => {
          return <ProjectCard {...item} {fitCards} />
          
        })
    }
  </div>
</section>

<style is:global>
  .projects-wrapper {
    padding:  var(--site-padding);
    padding-top:0;
    padding-bottom: var(--space-6xl);
    min-height: 80vh;
  }

  .layout-grid  {
    /* background-color: aqua; */
  }



  .layout-list {
    /* background: yellow; */
  }

  
   .layout-grid .project-list {
    /* homepage grid */
    /* background-color: blue; */
    /* grid-template-columns: repeat(12, minmax(0, 1fr)); */
    align-items: start;
  }

  .layout-list .project-list {
    /* overview grid */
    /* background-color: red; */
     grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
    align-items: start;
  }

  

  .project-card:hover,
  .project-card:focus-within {
    box-shadow: 0 0 0 0.5rem;
    box-shadow: none;

    cursor: pointer;
  }

  .project-card img,
  .project-card video {
    /* transform: scale(1.0125); */
    transition: all 1.4s var(--easing-easeOutExpo);
    opacity: 0.90;
  }

  .project-card:hover img,
  .project-card:hover video {
    /* transform: scale(1); */
    opacity: 1;
  }
  .project-card:hover {
    /* transform: scale(0.985); */
  }

  .project-content a {
    text-decoration: none !important;
    color: inherit !important;
  }

  .project-content a:focus {
    text-decoration: underline;
  }

  .project-content a::after {
    content: '';
    position: absolute;
    inset: 0;
  }

  .project-card {
    transition: all 0.4s var(--easing-easeOutExpo);
  }
  .project-card:hover {
    opacity: 1;
  }
  .project-card:hover ~ .project-card {
    opacity: 0.75;
  }
  .project-list:hover .project-card:not(:hover) {
    opacity: 0.1;
  }
  .project-list:hover .project-card:not(:hover) {
    opacity: 0.75;
  }


  @media (min-width: 1024px) {
  .layout-list .project-list {
    grid-template-columns: repeat(6, minmax(0, 1fr));
  }
}
</style>


<script>
  import { inView, animate } from "motion"

  inView(".project-card .project-media", ({ target }) => {
    target.classList.add("in-view")
  })

  inView(".project-card .project-media",  (info) => {
    const controls = animate(
      info.target, 
      { 
      opacity: [0, 0.75], 
      transform: ["translateY(3rem)", "translateY(0px)"] 
      }, 
      {
        delay: 0.2,
        duration: 0.9,
        easing: [0.16, 1, 0.3, 1],
      }
    )
    // This will fire when the element leaves the viewport
    return (leaveInfo) => {
      controls.stop()
      animate(info.target, { opacity: 0, transform: ["translateY(0px)", "translateY(20px)"] }, { duration: 0.6 })
    }
  })

  inView(".project-card .project-content", ({ target }) => {
    target.classList.add("in-view")
  })

  inView(".project-card .project-content",  (info) => {
    const controls = animate(
      info.target, 
      { 
      opacity: [0, 1], 
      transform: ["translateY(2rem)", "translateY(0px)"] 
      }, 
      {
        delay: 0.1,
        duration: 0.4,
        easing: [0.16, 1, 0.3, 1],
      }
    )
    // This will fire when the element leaves the viewport
    return (leaveInfo) => {
      controls.stop()
      animate(info.target, { opacity: 0, transform: ["translateY(0px)", "translateY(20px)"] }, { duration: 0.6 })
    }
  })
</script>