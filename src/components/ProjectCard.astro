---
import { slugify } from '../lib/utils'
import Image from 'astro/components/Image.astro'
import TagGroup from '../components/TagGroup.astro'
import projImg from '../assets/img/koppert.png'

const {
  client = 'Koppert',
  title = 'Agriculture Campaign',
  imgsrc = projImg,
  imgalt = 'Agriculture Campaign',
  vidsrc = '',
  slug = '#',
  size = 'default',
  meta = [{ label: 'Campaign' }, { label: 'Identity' }],
} = Astro.props
// add ignore feature

let cardclasses = ''
if (size) {
  switch (size) {
    case 'small':
      cardclasses = 'lg:col-span-4'
      break
    case 'large':
      cardclasses = 'lg:col-span-8' // Assuming large should span 4 columns
      break
    case 'full':
      cardclasses = 'lg:col-span-12' // Assuming full should span all 16 columns
      break
    default:
      cardclasses = 'lg:col-span-6'
  }
}
// class=`project-card ${slugify(size)}

// sizes
// small
// const cardclasses = 'col-span-4'

// default
// const cardclasses = 'col-span-8'

// large
// const cardclasses = 'col-span-12'

// full
// const cardclasses = 'col-span-16'
---

<div class={`project-card ${cardclasses}`}>
  <div class="overflow-hidden rounded-lg project-media">
    {
      vidsrc ? (
        // if video src is set, show video with poster image
        <div class="w-full project-video">
          <video
            preload="metadata"
            tabindex="-1"
            disablepictureinpicture
            playsinline
            loop
            title={title}
            src={vidsrc}
            poster={imgsrc}
            autoplay
            class="w-full"
          />
        </div>
      ) : (
        imgsrc && (
          // if no video, show image
          <div class="project-image">
            <Image
              src={imgsrc}
              alt={imgalt}
              inferSize={true}
              widths={[240, 540, 720, projImg.width]}
              sizes={`(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${projImg.width}px`}
              class="min-w-full"
            />
          </div>
        )
      )
    }
  </div>

  <div class="project-content">
    <div class="flex justify-between py-4 align-baseline project-meta">
      {client && <h3 class="text-xs project-client">{client}</h3>}
      {meta && <TagGroup tags={meta} />}
    </div>

    {
      title && (
        <h2 class="leading-none project-title text-xl3">
          <a href={slug} class="project-link">
            {title}
          </a>
        </h2>
      )
    }
  </div>

  <style is:global>
    .project-card {
      position: relative;
      /* overflow: hidden; */
      transition: box-shadow 0.15s ease-in-out;
      color: var(--font-color);
    }

    .project-card:hover,
    .project-card:focus-within {
      box-shadow: 0 0 0 0.5rem;
      box-shadow: none;
    }

    .project-content a {
      text-decoration: none !important;
      color: inherit !important;
    }

    .project-content a:focus {
      text-decoration: underline;
    }

    .project-content a::after {
      content: '';
      position: absolute;
      inset: 0;
    }

    /* .card {
    display: flex;
    flex-direction: column;
    border: 2px solid black;
    border-radius: 0.5rem;
    max-width: 60ch;
    min-height: 100%;
    position: relative;
    overflow: hidden;
    transition: box-shadow 0.15s ease-in-out;
  }

  .card:hover,
  .card:focus-within {
    box-shadow: 0 0 0 0.25rem;
  }

  .card:focus-within a:focus {
    text-decoration: none;
    box-shadow: none;
    outline: none;
  }

  .card__image {
    height: 10rem;
  }

  .card__image img {
    height: 100%;
    width: 100%;
    object-fit: cover;
  }

  .card__content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    padding: 1rem;
  }

  .card__content a {
    text-decoration: none;
  }

  .card__content a:focus {
    text-decoration: underline;
  }

  .card__content a::after {
    content: '';
    position: absolute;
    inset: 0;
  }

  .card__content:last-child {
    margin-top: auto;
    padding-top: 2rem;
  } */
  </style>
</div>
