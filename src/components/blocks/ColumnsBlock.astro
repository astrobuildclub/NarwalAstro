---
// Import Components & Scripts
import TextBlock from './TextBlock.astro'
import ImageBlock from './ImageBlock.astro'
// import VideoBlock from './VideoBlock.astro'

// Define Types
interface ImageNode {
  altText: string;
  title: string;
  sourceUrl: string;
}
interface Image {
  node: ImageNode;
}
interface ColItem {
  contentType: "image" | "video" | "text";
  showText: boolean;
  text: string | null;
  title: string | null;
  verticalAlign: string[];
  video: any | null;
  image: Image;
}
type Props = {
  cols: ColItem[];
}

// Define Vars
const { cols } = Astro.props
---

<!-- ColumnsBlock -->
<div class="grid gap-6 multicols full  lg:grid-cols-[repeat(auto-fit,_minmax(320px,_1fr))]">
   {cols &&
    cols.map((col) => {
      switch (col.contentType) {
        case 'image': // Image
          if(!col.showText){
            return (
              <div class="col"><ImageBlock sourceUrl={col.image?.node?.sourceUrl || ""} altText={col.image?.node?.altText || ""} /></div>
            )
          }else{
            return (
              <div class="col">
                <ImageBlock sourceUrl={col.image?.node?.sourceUrl || ""} altText={col.image?.node?.altText || ""} />
                <TextBlock title={col.title || ""} content={col.text || ""}  />
              </div>
            )
          }
        case 'video': //Videoblock
        // if(!col.showText){
        //     return <div class="col"><VideoBlock /></div>
        //   }else{
        //     return (
        //       <div class="col">
        //        <VideoBlock />
        //         <TextBlock title={col.title || ""} content={col.text || ""}  />
        //       </div>
        //     )
        //   }
        case 'text':  // Textblock
        default:
          return  <div class="col"><TextBlock title={col.title || ""} content={col.text || ""}  /></div>
      }
    })
  }
</div>