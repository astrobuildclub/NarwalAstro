---
// Import Components & Scripts
import TextBlock from '../blocks/TextBlock.astro'
import ImageBlock from '../blocks/ImageBlock.astro'
import VideoBlock from '../blocks/VideoBlock.astro'

// Define Types
interface ImageNode {
  altText: string;
  title: string;
  sourceUrl: string;
}
interface Image {
  node: ImageNode;
}
interface ColItem {
  contentType: "image" | "video" | "text";
  showText: boolean;
  text: string | null;
  title: string | null;
  verticalAlign: string[];
  video: any | null;
  image: Image;
}
type Props = {
  cols: ColItem[];
}

// Define Vars
const { cols } = Astro.props

---

<div class="project-multicols full">
   {cols &&
    cols.map((col) => {
      switch (col.contentType) {
        case 'image': // Image
          if(!col.showText){
            return (
              <div class="col"><ImageBlock sourceUrl={col.image?.node?.sourceUrl || ""} altText={col.image?.node?.altText || ""} /></div>
            )
          }else{
            return (
              <div class="col">
                <ImageBlock sourceUrl={col.image?.node?.sourceUrl || ""} altText={col.image?.node?.altText || ""} />
                <TextBlock title={col.title || ""} content={col.text || ""}  />
              </div>
            )
          }
        case 'video': //Videoblock
        if(!col.showText){
            return <div class="col"><VideoBlock /></div>
          }else{
            return (
              <div class="col">
               <VideoBlock />
                <TextBlock title={col.title || ""} content={col.text || ""}  />
              </div>
            )
          }
        case 'text':  // Textblock
        default:
          return <TextBlock title={col.title || ""} content={col.text || ""}  />
      }
    })
  }
</div>

<style>
  .project-multicols {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: var(--grid-gutter);
  }
</style>
